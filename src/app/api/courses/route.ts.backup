import { NextRequest, NextResponse } from 'next/server';
import { db } from '@/lib/db';
import { getUserFromRequest } from '@/lib/server-auth';
import { canCreateCourse } from '@/lib/permissions';

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const batchId = searchParams.get('batchId');
    
    if (!batchId) {
      return NextResponse.json({ error: 'Batch ID is required' }, { status: 400 });
    }

    const courses = await db.course.findMany({
      where: {
        batchId: batchId
      },
      include: {
        batch: {
          include: {
            program: {
              select: {
                name: true,
                code: true
              }
            }
          }
        },
        _count: {
          select: {
            courseOutcomes: true,
            enrollments: true
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    return NextResponse.json(courses);
  } catch (error) {
    console.error('Error fetching courses:', error);
    return NextResponse.json({ error: 'Failed to fetch courses' }, { status: 500 });
  }
}

export async function POST(request: NextRequest) {
  console.log('POST /api/courses called');
  try {
    // Verify authentication
    const user = await getUserFromRequest(request);
    
    if (!user) {
      return NextResponse.json(
        { error: 'Authorization required' },
        { status: 401 }
      );
    }

    // Check permissions
    if (!canCreateCourse(user)) {
      return NextResponse.json(
        { error: 'Insufficient permissions. Only admin, university, department, and program coordinator roles can create courses.' },
        { status: 403 }
      );
    }

    const body = await request.json();
    console.log('Request body:', body);
    const { code, name, semester, batchId, description } = body;
    
    console.log('Extracted fields:', { code, name, semester, batchId, description });

    if (!code || !name || !batchId) {
      console.log('Validation failed');
      return NextResponse.json({ 
        error: 'Course code, name, and batch ID are required' 
      }, { status: 400 });
    }

    // For program coordinators, verify they have access to this batch
    if (user.role === 'PROGRAM_COORDINATOR') {
      const batch = await db.batch.findUnique({
        where: { id: batchId },
        include: {
          program: true
        }
      });

      if (!batch || batch.programId !== user.programId) {
        return NextResponse.json(
          { error: 'Program coordinators can only create courses for their assigned program batches' },
          { status: 403 }
        );
      }
    }

    console.log('Checking for existing course');
    const existingCourse = await db.course.findFirst({
      where: {
        code,
        batchId
      }
    });

    if (existingCourse) {
      console.log('Course already exists');
      return NextResponse.json({ 
        error: 'Course with this code already exists in this batch' 
      }, { status: 409 });
    }

    console.log('Verifying batch exists');
    const batch = await db.batch.findUnique({
      where: { id: batchId }
    });

    if (!batch) {
      console.log('Batch not found');
      return NextResponse.json({ error: 'Batch not found' }, { status: 404 });
    }

    console.log('Creating new course');
    console.log('Course data to create:', {
      code,
      name,
      semester: semester || '',
      description: description || '',
      status: 'FUTURE',
      batchId
    });
    
    const course = await db.course.create({
      data: {
        code,
        name,
        semester: semester || '',
        description: description || '',
        status: 'FUTURE',
        batchId
      }
    });

    console.log('Course created successfully');
    return NextResponse.json(course, { status: 201 });
  } catch (error) {
    console.error('Error creating course:', error);
    return NextResponse.json({ error: 'Failed to create course' }, { status: 500 });
  }
}