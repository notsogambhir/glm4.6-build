// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String?  @unique
  studentId   String?  @unique  // Student ID for students (numeric or alphanumeric)
  password    String
  name        String
  role        UserRole @default(TEACHER)
  collegeId   String?
  departmentId String?
  programId   String?
  batchId     String?  // Added for students
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  college     College?     @relation(fields: [collegeId], references: [id])
  department  Department?  @relation(fields: [departmentId], references: [id])
  program     Program?     @relation("ProgramUsers", fields: [programId], references: [id])
  programAsStudent Program? @relation("ProgramStudents", fields: [programId], references: [id])
  batch       Batch?       @relation("BatchStudents", fields: [batchId], references: [id])
  enrollments Enrollment[]
  
  @@map("users")
}

model College {
  id          String   @id @default(cuid())
  name        String   @unique
  code        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       User[]
  departments Department[]
  programs    Program[]
  
  @@map("colleges")
}

model Department {
  id          String   @id @default(cuid())
  name        String
  code        String
  collegeId   String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  college     College  @relation(fields: [collegeId], references: [id])
  users       User[]
  programs    Program[]
  
  @@unique([collegeId, code])
  @@map("departments")
}

model Program {
  id          String      @id @default(cuid())
  name        String
  code        String
  collegeId   String
  departmentId String?
  duration    Int         // in years
  description String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  college     College     @relation(fields: [collegeId], references: [id])
  department  Department? @relation(fields: [departmentId], references: [id])
  users       User[]       @relation("ProgramUsers")
  batches     Batch[]
  students    User[]       @relation("ProgramStudents")
  
  @@unique([collegeId, code])
  @@map("programs")
}

model Batch {
  id        String   @id @default(cuid())
  name      String
  programId String
  startYear Int
  endYear   Int
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

program   Program  @relation(fields: [programId], references: [id])
  courses   Course[]
  students  User[]   @relation("BatchStudents")
  
  @@unique([programId, name])
  @@map("batches")
}

model Course {
  id          String      @id @default(cuid())
  code        String
  name        String
  batchId     String      // Course belongs to a specific batch
  semester    String
  description String?
  status      CourseStatus @default(FUTURE)  // Track course status: FUTURE, ACTIVE, COMPLETED
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  batch         Batch    @relation(fields: [batchId], references: [id])
  courseOutcomes CO[]
  assessments   Assessment[]
  enrollments   Enrollment[]
  
  @@unique([batchId, code])
  @@map("courses")
}

model CO {
  id          String   @id @default(cuid())
  courseId    String
  code        String
  description String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  course       Course @relation(fields: [courseId], references: [id])
  mappings     COPOMapping[]
  questions    Question[]
  
  @@unique([courseId, code])
  @@map("cos")
}

model PO {
  id          String   @id @default(cuid())
  programId   String
  code        String
  description String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  mappings     COPOMapping[]

  @@unique([programId, code])
  @@map("pos")
}

model PEO {
  id          String   @id @default(cuid())
  programId   String
  code        String
  description String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([programId, code])
  @@map("peos")
}

model COPOMapping {
  id       String @id @default(cuid())
  coId     String
  poId     String
  level    Int    // 1-3 correlation level
  isActive Boolean @default(true)

  co       CO @relation(fields: [coId], references: [id])
  po       PO @relation(fields: [poId], references: [id])

  @@unique([coId, poId])
  @@map("co_po_mappings")
}

model Assessment {
  id          String   @id @default(cuid())
  courseId    String
  name        String
  type        String   // exam, quiz, assignment, project
  maxMarks    Int
  weightage   Float
  semester    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  course       Course @relation(fields: [courseId], references: [id])
  questions    Question[]
  
  @@map("assessments")
}

model Question {
  id           String   @id @default(cuid())
  assessmentId String
  question     String
  maxMarks     Int
  coId         String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  assessment   Assessment @relation(fields: [assessmentId], references: [id])
  co           CO @relation(fields: [coId], references: [id])
  
  @@map("questions")
}

model Enrollment {
  id         String   @id @default(cuid())
  courseId   String
  studentId  String
  semester   String
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  course     Course @relation(fields: [courseId], references: [id])
  student    User   @relation(fields: [studentId], references: [id])
  
  @@unique([courseId, studentId])
  @@map("enrollments")
}

enum UserRole {
  ADMIN
  UNIVERSITY
  DEPARTMENT
  PROGRAM_COORDINATOR
  TEACHER
  STUDENT
}

enum CourseStatus {
  FUTURE
  ACTIVE
  COMPLETED
}